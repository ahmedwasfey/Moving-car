from OpenGL.GLUT import *
from OpenGL.GLU import *
from OpenGL.GL import *
import numpy as np
from math import *
angle=0
x=0
d=-1
z=0
def myInit():
   glMatrixMode(GL_PROJECTION)
   glLoadIdentity()
   gluPerspective(60,1,0.1,50)
   gluLookAt(8,9,10,
             0,0,0,
             0,1,0)
   glClearColor(0.53,0.81,0.92,1)
   glClear(GL_COLOR_BUFFER_BIT)

def draw_circle(r=0.5, xc=0, yc=0, R=1, g=1, b=1,start=0,end=2*pi):
    glBegin(GL_POLYGON)
    glColor(R, g, b)
    for theta in np.arange(start, end, .001):
        x = xc + r * cos(theta)
        y = yc + r * sin(theta)

        glVertex(x, y)
    glEnd()



def cloud():
    glScale(0.9,0.6,0.9)
    glTranslate(2,9,-5)
    draw_circle(2)
    glTranslate(2.5,0,0)
    draw_circle(2)
    glTranslate(-1.25,2,0)
    draw_circle(1.6)
def tree():
    glColor(1,1,1)





def scene ():
    glTranslate(-20,-5,-30)
    cloud()
    glLoadIdentity()
    glTranslate(-4, -3, -20)
    cloud()
    glLoadIdentity()
    glTranslate(-32,-8, -20)
    cloud()

def road():
    #glRotate(90,0,1,0)
    glBegin(GL_POLYGON)
    #glColor(0.1, 1, 0.4)
    glColor(1,1,0.5)
    glVertex(-50, -5 , -300)
    glVertex(-50, -5 , 100)
    glVertex(50, -5, 100)
    glVertex(50,-5,-300)
    glEnd()


    glColor(0.2, 0.2, 0.2)
    glBegin(GL_QUADS)
    glVertex(-40,-2.5*0.25,-4)
    glVertex(-40, -2.5 * 0.25, 4)
    glVertex(10, -2.5 * 0.25, 4)
    glVertex(10, -2.5 * 0.25, -4)
    glEnd()
    clr=-1
    for i in range(-50,15,3):
       clr=-1*clr
       glLoadIdentity()
       #glRotate(90, 0, 1, 0)
       glColor(clr,clr,clr)
       glTranslate(i,-2.5*0.25,4.6)
       glScale(1,0.3,0.3)
       glutSolidCube(3)
       glLoadIdentity()

    for i in range(-50,15,3):
       clr=-1*clr
       glLoadIdentity()
       #glRotate(90, 0, 1, 0)
       glColor(clr,clr,clr)
       glTranslate(i,-2.5*0.25,-5.1)
       glScale(1,0.3,0.3)
       glutSolidCube(3)
       glLoadIdentity()

    for i in range(-50,15,7):
        #glRotate(90, 0, 1, 0)
        glColor(1,1,1)
        glBegin(GL_QUADS)
        glVertex(i,-2.5*0.25,-0.5)
        glVertex(i, -2.5 * 0.25, 0.5)
        glVertex(i+4, -2.5 * 0.25, 0.5)
        glVertex(i+4, -2.5 * 0.25, -0.5)
        glEnd()
        glLoadIdentity()








def draw():
    global angle
    global x
    global  d
    global z
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)

    glMatrixMode(GL_MODELVIEW)
    glLoadIdentity()
    road()
    glLoadIdentity()
    #glRotate(90, 0, 1, 0)
    scene()
    #glColor(1,0,1)
    #glTranslate(-x, 0, 2)
    #glutSolidSphere(2,100,100)
    glLoadIdentity()
    #glRotate(90, 0, 1, 0)
    glColor(0, 0, 1)
    glTranslate(x,0,z)
    glScale(1,0.25,0.5)
    glutSolidCube(5)
    glColor(0,0,0)
    glutWireCube(5)
    glLoadIdentity()
    #glRotate(90, 0, 1, 0)
    glColor(0, 0, 1)
    glTranslate(x-0.6,1.25,z)
    glScale(0.7,0.25,0.5)
    glutSolidCube(5)
    glColor(0, 0, 0)
    glutWireCube(5)
    glLoadIdentity()
    #glRotate(90, 0, 1, 0)
    glColor(0,0,0)

    glTranslate(2.5+x,-2.5*0.25,1.25+z)
    glRotate(angle, 0, 0, 1)
    glutWireTorus(0.25,0.5,13,14)

    glLoadIdentity()
    #glRotate(90, 0, 1, 0)
    glColor(0,0,0)
    glTranslate(-2.5+x,-2.5*0.25,1.25+z)
    glRotate(angle, 0, 0, 1)
    glutWireTorus(0.25,0.5,13,14)

    glLoadIdentity()
    #glRotate(90, 0, 1, 0)
    glColor(0,0,0)
    glTranslate(2.5+x,-2.5*0.25,-1.25+z)
    glRotate(angle, 0, 0, 1)
    glutWireTorus(0.25,0.5,12,8)
    #xyAxis()
    glLoadIdentity()
    #glRotate(90, 0, 1, 0)
    glColor(0,0,0)
    glTranslate(-2.5+x,-2.5*0.25,-1.25+z)
    glRotate(angle, 0, 0, 1)
    glutWireTorus(0.25,0.5,12,8)


    glColor(1,0,0)
    glLoadIdentity()
    #glRotate(90, 0, 1, 0)
    glTranslate(2.5+x,0,-0.6+z)
    glutWireSphere(0.3,100,100)

    glLoadIdentity()
    #glRotate(90, 0, 1, 0)
    glTranslate(2.5+x, 0, 0.6+z)
    glutWireSphere(0.3,100,100)

    if x>5:
        d=-1
    if x<-13:
        d=1
    if d==1:
        x+=0.3
        angle = (angle - 3) % 1000000
    if d==-1:
        x-=0.3
        angle = (angle + 3) % 1000000


    #xyAxis()
    glutSwapBuffers()
def specialKey(key,x,y):
    global  z
    if key == GLUT_KEY_LEFT:
        z+=0.3
    elif key == GLUT_KEY_RIGHT:
        z-=0.3
    draw()



glutInit()
glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB|GLUT_DEPTH )

glutInitWindowSize(500, 500)
glutCreateWindow(b"moving car")
glutDisplayFunc(draw)
glutIdleFunc(draw)
glutSpecialFunc(specialKey)
myInit()
glutMainLoop()
